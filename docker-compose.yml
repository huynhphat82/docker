version: '3'

networks:
  backend:
    driver: bridge

services:
  #################### APPLICATION (WEB) ####################
  # app:
  #   build: 
  #     context: ./app
  #     # Pass env variables from docker-compose.yml to Dockefile
  #     args: 
  #       - PROJECT_FOLDER=${PROJECT_FOLDER}
  #   environment:
  #     APP_ENV: ${APP_ENV}
  #     APP_DEBUG: ${APP_DEBUG}
  #     LOG_CHANNEL: ${LOG_CHANNEL}
  #   volumes:
  #     - ${PROJECT_PATH}/:/var/www
  #     - ${PROJECT_PATH}/${PROJECT_FOLDER}:/var/www/${PROJECT_FOLDER}
  #     - ${PROJECT_PATH}/${PROJECT_FOLDER}/storage:/var/www/${PROJECT_FOLDER}/storage
  #     - ${PROJECT_PATH}/${PROJECT_FOLDER}/node_modules:/var/www/${PROJECT_FOLDER}/node_modules
  #   expose:
  #     - 9000
  #   networks:
  #     - backend
  #################### MAILDEV ####################
  # maildev:
  #   build: ./maildev
  #   # env_file: .env
  #   # environment: 
  #   # container_name: maildev
  #   # volumes: 
  #   ports:
  #     - '1080:80'
  #     - '1025:25'
  #   networks: 
  #     - backend
  #   stdin_open: true
  #   tty: true
  #################### REDIS ####################
  # redis:
  #   build: ./redis
  #   volumes:
  #     - './redis/data:/data'
  #   ports:
  #     - 6379:6379
  #   networks: 
  #     - backend
  #   stdin_open: true
  #   tty: true
  #################### S3 ####################
  # s3:
  #   build: ./s3
  #   environment: 
  #     - MINIO_ROOT_USER=$MINIO_ROOT_USER
  #     - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
  #   volumes:
  #     - './s3/data:/data'
  #   ports:
  #     - 9000:9000
  #   networks: 
  #     - backend
  #   stdin_open: true
  #   tty: true
  #################### S3 BUCKET ####################
  # s3bucket:
  #   build: ./s3bucket
  #   volumes:
  #     - './s3bucket/data:/data'
  #   networks: 
  #     - backend
  #   depends_on: 
  #     - s3
  #   stdin_open: true
  #   tty: true
  #################### AWS SQS ####################
  # sqs:
  #   build: ./sqs
  #   volumes:
  #     - './sqs/opt/elasticmq.conf:/opt/elasticmq.conf'
  #   ports:
  #     - "9324:9324"
  #     - "9325:9325"
  #   networks: 
  #     - backend
  #   stdin_open: true
  #   tty: true
  #################### PGSQL ####################
  # pgsql:
  #   build: ./pgsql
  #   environment:
  #     TZ: '${APP_TZ}'
  #     POSTGRES_USER: '${DB_USERNAME}'
  #     POSTGRES_PASSWORD: '${DB_PASSWORD}'
  #     POSTGRES_DB: '${DB_DATABASE}'
  #   volumes:
  #     - ./pgsql:/var/lib/postgresql/data
  #     - ./pgsql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
  #   ports:
  #     - 5432:5432
  #   networks:
  #     - backend
  #################### NGNIX ####################
  # nginx:
  #   build:
  #     context: ./nginx
  #     args:
  #       APP_URL: '${APP_URL}'
  #   ports:
  #     - 8000:8000
  #     - 8001:8001
  #     - 9326:9326
  #   volumes:
  #     - ../sourcecode/public:/var/www/sourcecode/public
  #     - ../sourcecode/storage/app/public:/var/www/sourcecode/public/storage
  #   links:
  #     - app
  #     - s3
  #     - sqs
  #   networks:
  #     - backend
  #################### JENKINS ####################
  # jenkins:
  #   build: ./jenkins
  #   volumes:
  #     - ./jenkins:/var/www/jenkins
  #   stdin_open: true
  #   tty: true
  #   ports:
  #     - "8080:8080"
  #     - "9090:9090"
  #   networks:
  #     - backend
  #################### ELASTIC SEARCH ####################
  # elasticsearch:
  #   build: ./elasticsearch
  #   container_name: elasticsearch
  #   restart: always
  #   # environment:
  #     # - node.name=elasticsearch
  #     # - cluster.name=elasticsearch
  #     # - discovery.type=single-node
  #     # - xpack.security.enabled=false
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   cap_add: 
  #     - IPC_LOCK
  #   ports:
  #     - 9200:9200
  #   volumes:
  #     - ./elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
  #     - ./elasticsearch/data:/usr/share/elasticsearch/data
  #   stdin_open: true
  #   tty: true
  #   networks: 
  #     - backend
  #################### KIBANA FOR ELASTIC SEARCH ####################
  # kibana:
  #   build: ./kibana
  #   container_name: kibana
  #   restart: always
  #   # environment:
  #   #   - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   ports:
  #     - 5601:5601
  #   volumes: 
  #     - ./kibana/conf/kibana.yml:/usr/share/kibana/config/kibana.yml
  #   depends_on: 
  #     - elasticsearch
  #   stdin_open: true
  #   tty: true
  #   networks: 
  #     - backend
  #################### APPs FOR LOAD BALANCER ####################
  # elb_app1: # http
  #   build: ./loadbalancer/app/apache/1
  #   expose: 
  #     - 80
  #   networks: 
  #     - backend
  # elb_app2: # http
  #   build: ./loadbalancer/app/apache/2
  #   expose: 
  #     - 80
  #   networks: 
  #     - backend
  # elb_app3: # https
  #   build: ./loadbalancer/app/nginx/1
  #   ports: 
  #     - 8031:80
  #     - 4431:443
  #   networks: 
  #     - backend
  #   stdin_open: true
  #   tty: true
  # elb_app4: # https
  #   build: ./loadbalancer/app/nginx/2
  #   ports: 
  #     - 8032:80
  #     - 4432:443
  #   networks: 
  #     - backend
  #   stdin_open: true
  #   tty: true
  #################### ELASTIC LOAD BALANCING ####################
  # loadbalancer:
  #   build: ./loadbalancer
  #   restart: always
  #   hostname: haproxy
  #   ports:
  #     - 8088:80                         # Mở cổng 8080 public -> 80
  #     - 443:443                         # Mở cổng 443  public -> 443
  #   stdin_open: true
  #   tty: true
  #   networks: 
  #     - backend
  #################### SMS DATABASE SERVER ####################
  db_sms:
    image: mysql:5.7.19
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=smsender
      - MYSQL_USER=smsender_user
      - MYSQL_PASSWORD=smsender_password
    ports:
      - "33061:3306"
    networks:
      - backend
    stdin_open: true
    tty: true
  #################### SMS SERVER ####################
  sms:
    depends_on:
      - db_sms
    build: ./sms
    ports:
      - "8080:8080"
    restart: always
    volumes:
      - ./sms/conf:/smsender/config:rw
    environment:
      - MYSQL_DATABASE=smsender
      - MYSQL_USER=smsender_user
      - MYSQL_PASSWORD=smsender_password
      - MYSQL_HOST=db_sms
      - MYSQL_PORT=3306
    networks:
      - backend
    stdin_open: true
    tty: true
  ses:
    build: ./ses
    ports:
      - "9001:9001"
    restart: always
    volumes:
      - ./ses/data:/aws-ses-local/output
    networks:
      - backend
    stdin_open: true
    tty: true
  #################### SNS SERVER ####################
  sns:
    build: ./sns
    ports:
      - "9911:9911"
    restart: always
    volumes:
      - ./sns/data/db.json:/etc/sns/db.json
    networks:
      - backend
    stdin_open: true
    tty: true
  #   depends_on:
  #     - sqs
  # sqs:
  #   image: s12v/elasticmq
  #   ports:
  #   - "9324:9324"
  #   volumes:
  #   - ./config/elasticmq.conf:/etc/elasticmq/elasticmq.conf

#################### DEFINE VOLUMES ####################
volumes:
  elasticsearch-data:
    driver: local